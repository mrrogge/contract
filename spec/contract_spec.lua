describe('contract module,', function()
    insulate('check()/__call()', function()
        local contract = require('contract')

        --since contract.__call() is an alias for contract.check(), all of the following tests apply for both. To simplify our test code, we will create a local function that calls both of these with the same arguments. Note that this function will not work for the implicit arg lookup tests - those will need to define a different calling function.
        local function check(input, ...)
            contract.check(input, ...)
            contract(input, ...)
        end

        --testing types against contract with number
        it('accepts number args for number contracts', function()
            assert.has_no.errors(function() check("n", 1) end)
        end)
        it('rejects string args for number contracts', function()
            assert.has.errors(function() check("n", "") end)
        end)
        it('rejects bool true for number contracts', function()
            assert.has.errors(function() check("n", true) end)
        end)
        it('rejects table args for number contracts', function()
            assert.has.errors(function() check("n", {}) end)
        end)
        it('rejects function args for number contracts', function()
            assert.has.errors(function() check("n", function() end) end)
        end)    
        it('rejects thread args for number contracts', function()
            assert.has.errors(function() check("n", coroutine.create(function() end)) end)
        end)
        it('rejects userdata args for number contracts', function()
            pending()
        end)

        --alternate string representations for number type
        it('allows "num" in contract string', function()
            assert.has_no.errors(function() check("num", 1) end)
        end)
        it('allows "number" in contract string', function()
            assert.has_no.errors(function() check("number", 1) end)
        end)

        --testing types against contract with string
        it('rejects number args for string contracts', function()
            assert.has.errors(function() check("s", 1) end)
        end)
        it('accepts string args for string contracts', function()
            assert.has_no.errors(function() check("s", "") end)
        end)
        it('rejects bool true for string contracts', function()
            assert.has.errors(function() check("s", true) end)
        end)
        it('rejects table args for string contracts', function()
            assert.has.errors(function() check("s", {}) end)
        end)
        it('rejects function args for string contracts', function()
            assert.has.errors(function() check("s", function() end) end)
        end)    
        it('rejects thread args for string contracts', function()
            assert.has.errors(function() check("s", coroutine.create(function() end)) end)
        end)
        it('rejects userdata args for string contracts', function()
            pending()
        end)

        --alternate string representations for string type
        it('allows "str" in contract string', function()
            assert.has_no.errors(function() check("str", "") end)
        end)
        it('allows "string" in contract string', function()
            assert.has_no.errors(function() check("string", "") end)
        end)

        --testing types against contract with bool
        it('rejects number args for bool contracts', function()
            assert.has.errors(function() check("b", 1) end)
        end)
        it('rejects string args for bool contracts', function()
            assert.has.errors(function() check("b", "") end)
        end)
        it('accepts bool true for bool contracts', function()
            assert.has_no.errors(function() check("b", true) end)
        end)
        it('rejects table args for bool contracts', function()
            assert.has.errors(function() check("b", {}) end)
        end)
        it('rejects function args for bool contracts', function()
            assert.has.errors(function() check("b", function() end) end)
        end)    
        it('rejects thread args for bool contracts', function()
            assert.has.errors(function() check("b", coroutine.create(function() end)) end)
        end)
        it('rejects userdata args for bool contracts', function()
            pending()
        end)

        --alternate string representations for bool type
        it('allows "bool" in contract string', function()
            assert.has_no.errors(function() check("bool", true) end)
        end)
        it('allows "boolean" in contract string', function()
            assert.has_no.errors(function() check("boolean", true) end)
        end)

        --testing types against contract with table
        it('rejects number args for table contracts', function()
            assert.has.errors(function() check("t", 1) end)
        end)
        it('rejects string args for table contracts', function()
            assert.has.errors(function() check("t", "") end)
        end)
        it('rejects bool true for table contracts', function()
            assert.has.errors(function() check("t", true) end)
        end)
        it('accepts table args for table contracts', function()
            assert.has_no.errors(function() check("t", {}) end)
        end)
        it('rejects function args for table contracts', function()
            assert.has.errors(function() check("t", function() end) end)
        end)    
        it('rejects thread args for table contracts', function()
            assert.has.errors(function() check("t", coroutine.create(function() end)) end)
        end)
        it('rejects userdata args for table contracts', function()
            pending()
        end)

        --alternate string representations for table type
        it('allows "tbl" in contract string', function()
            assert.has_no.errors(function() check("tbl", {}) end)
        end)
        it('allows "table" in contract string', function()
            assert.has_no.errors(function() check("table", {}) end)
        end)

        --testing types against contract with function
        it('rejects number args for function contracts', function()
            assert.has.errors(function() check("f", 1) end)
        end)
        it('rejects string args for function contracts', function()
            assert.has.errors(function() check("f", "") end)
        end)
        it('rejects bool true for function contracts', function()
            assert.has.errors(function() check("f", true) end)
        end)
        it('rejects table args for function contracts', function()
            assert.has.errors(function() check("f", {}) end)
        end)
        it('accepts function args for function contracts', function()
            assert.has_no.errors(function() check("f", function() end) end)
        end)    
        it('rejects thread args for function contracts', function()
            assert.has.errors(function() check("f", coroutine.create(function() end)) end)
        end)
        it('rejects userdata args for function contracts', function()
            pending()
        end)

        --alternate string representations for function type
        it('allows "fnc" in contract string', function()
            assert.has_no.errors(function() check("fnc", function() end) end)
        end)
        it('allows "func" in contract string', function()
            assert.has_no.errors(function() check("func", function() end) end)
        end)
        it('allows "function" in contract string', function()
            assert.has_no.errors(function() check("function", function() end) end)
        end)

        --testing types against contract with thread
        it('rejects number args for thread contracts', function()
            assert.has.errors(function() check("th", 1) end)
        end)
        it('rejects string args for thread contracts', function()
            assert.has.errors(function() check("th", "") end)
        end)
        it('rejects bool true for thread contracts', function()
            assert.has.errors(function() check("th", true) end)
        end)
        it('rejects table args for thread contracts', function()
            assert.has.errors(function() check("th", {}) end)
        end)
        it('rejects function args for thread contracts', function()
            assert.has.errors(function() check("th", function() end) end)
        end)    
        it('accept thread args for thread contracts', function()
            assert.has_no.errors(function() check("th", coroutine.create(function() end)) end)
        end)
        it('rejects userdata args for thread contracts', function()
            pending()
        end)

        --alternate string representations for thread type
        it('allows "thread" in contract string', function()
            assert.has_no.errors(function() check("thread", coroutine.create(function() end)) end)
        end)

        --testing types against contract with userdata
        it('rejects number args for userdata contracts', function()
            pending()
        end)
        it('rejects string args for userdata contracts', function()
            pending()
        end)
        it('rejects bool true for userdata contracts', function()
            pending()
        end)
        it('rejects table args for userdata contracts', function()
            pending()
        end)
        it('rejects function args for userdata contracts', function()
            pending()
        end)    
        it('rejects thread args for userdata contracts', function()
            pending()
        end)
        it('accepts userdata args for userdata contracts', function()
            pending()
        end)

        --alternate string representations for userdata type
        it('allows "usr" in contract string', function()
            pending()
        end)
        it('allows "user" in contract string', function()
            pending()
        end)
        it('allows "userdata" in contract string', function()
            pending()
        end)

        --testing types against contract with "any"
        it('accepts number args for "any" contracts', function()
            assert.has_no.errors(function() contract('a', 1) end)
        end)
        it('accepts string args for "any" contracts', function()
            assert.has_no.errors(function() check("a", "") end)
        end)
        it('accepts bool true for "any" contracts', function()
            assert.has_no.errors(function() check("a", true) end)
        end)
        it('accepts table args for "any" contracts', function()
            assert.has_no.errors(function() check("a", {}) end)
        end)
        it('accepts function args for "any" contracts', function()
            assert.has_no.errors(function() check("a", function() end) end)
        end)    
        it('accepts thread args for "any" contracts', function()
            assert.has_no.errors(function() check("a", coroutine.create(function() end)) end)
        end)
        it('accepts userdata args for "any" contracts', function()
            pending()
        end)

        --alternate string representations for "any" type
        it('allows "any" in contract string', function()
            assert.has_no.errors(function() contract('any', 1) end)
        end)

        --handling required args
        it('accepts a matching required arg', function()
            assert.has_no.errors(function() check('rn', 1) end)
        end)
        it('rejects a non-matching required arg', function()
            assert.has.errors(function() check('rn', 'one') end)
        end)
        it('accepts multiple matching required args', function()
            assert.has_no.errors(function() check('rn,rs', 1, "two") end)
        end)
        it('rejects a missing required arg', function()
            assert.has.errors(function() check('rn,rs', 1) end)
        end)
        it('rejects an explicit nil for a required arg', function()
            assert.has.errors(function() check('rn', nil) end)
        end)

        --handling empty contracts
        it('accepts an empty string contract', function()
            assert.has_no.errors(function() check('', nil) end)
        end)
        it('accepts an empty string contract and no args', function()
            assert.has_no.errors(function() check('') end)
        end)
        it('accepts an explicit nil for contract', function()
            assert.has_no.errors(function() check(nil, nil) end)
        end)
        it('accepts an explicit nil contract and no args', function()
            assert.has_no.errors(function() check(nil) end)
        end)
        it('accepts nothing for contract', function()
            assert.has_no.errors(function() check() end)
        end)

        it('accepts additional args beyond those in the contract', function()
            assert.has_no.errors(function() check('rn', 1, 'two', 3) end)
        end)

        --handling optional args
        it('accepts a missing optional arg', function()
            assert.has_no.errors(function() check('rn,n', 1) end)
        end)
        it('accepts a matching optional arg', function()
            assert.has_no.errors(function() check('n', 1) end)
        end)
        it('accepts an explicit nil for an optional arg', function()
            assert.has_no.errors(function() check('n', nil) end)
        end)
        it('rejects a non-matching optional arg', function()
            assert.has.errors(function() check('n', 'one') end)
        end)
        it('handles explicit nils between other args', function()
            assert.has_no.errors(function() check('n,n,n', 1, nil, 3) end)
        end)
        it('handles explicit nils between required args', function()
            assert.has_no.errors(function() check('rn,n,rn', 1, nil, 3) end)
        end)

        --implicit arg lookup
        it('accepts correct args looked up implicitly from the calling function if unspecified', function()
            assert.has_no.errors(function()
                local f = function(a,b)
                    contract.check('rn,rs')
                    contract('rn,rs')
                end
                f(1, 'two')
            end)
        end)
        it('rejects incorrect args looked up implicitly from the calling function if unspecified', function()
            assert.has.errors(function()
                local f = function(a,b)
                    contract.check('rn,rs')
                    contract('rn,rs')
                end
                f(1, 2)
            end)
        end)
        
        --handling varargs
        it('accepts matching varargs passed explicitly', function()
            assert.has_no.errors(function()
                local f = function(...)
                    contract.check('n,n', ...)
                    contract('n', ...)
                end
                f(1, 2)
            end)
        end)
        it('rejects non-matching varargs passed explicitly', function()
            assert.has.errors(function()
                local f = function(...)
                    contract.check('n,n', ...)
                    contract('n,n', ...)
                end
                f('one', 'two')
            end)
        end)
        it('accepts explicit nils for optional varargs when passed explicitly', function()
            assert.has_no.errors(function()
                local f = function(...)
                    contract.check('n,n', ...)
                    contract('n,n', ...)
                end
                f(nil, nil)
            end)
        end)
        it('errors when varargs list is empty', function()
            assert.has.errors(function()
                local f = function(...)
                    contract.check('n', ...)
                    contract('n', ...)
                end
                f()
            end)
        end)   
        it('errors when trying to lookup varargs implicitly from the calling function', function()
            assert.has.errors(function()
                local f = function(...)
                    contract.check('n,n')
                    contract('n,n')
                end
                f(1, 2)
            end)       
        end)

        --handling multi-type rules in contracts
        it('accepts args that match either of the types in a required multi-type rule', function()
            assert.has_no.errors(function() check('rn|s,rn|s', 1, 'two') end)
        end)
        it('rejects args that match none of the types in a required multi-type rule', function()
            assert.has.errors(function() check('rn|s', true) end)
        end)
        it('accepts args that match either of the types in an optional multi-type rule', function()
            assert.has_no.errors(function() check('n|s,n|s', 1, 'two') end)
        end)
        it('rejects args that match none of the types in an optional multi-type rule', function()
            assert.has.errors(function() check('n|s', true) end)
        end)

        it('contracts are not case-sensitive', function()
            assert.has_no.errors(function() check('rn,rN,Rn,RN', 1, 2, 3, 4) end)
        end)

        --handling whitespace
        it('ignores leading whitespace in contract', function()
            assert.has_no.errors(function() check('\n\r\t rn', 1) end)
        end)
        it('ignores trailing whitespace in contract', function()
            assert.has_no.errors(function() check('rn \n\r\t', 1) end)
        end)
        it('ignores whitespace between characters in contract', function()
            assert.has_no.errors(function() check('r \n\r\t n', 1) end)
        end)

        it('raises error for invalid characters in a contract', function()
            assert.has.errors(function() check('rxxxxxn', 1) end)
        end)

        it('raises error for invalid characters following a valid contract string', function()
            assert.has.errors(function() check('nxxxxx', 1) end)
        end)

        it('passes successive calls for same contract and same args', function()
            assert.has_no.errors(function()
                check('rn', 1)
                check('rn', 1)
            end)
        end)
    end)

    insulate('off()', function()
        local contract = require('contract')
        it('disables contract checking', function()
            contract.off()
            assert.has_no.errors(function() contract('rn', 'one') end)
        end)
    end)

    insulate('on()', function()
        local contract = require('contract')
        it('enables contract checking', function()
            contract.on()
            assert.has_no.errors(function() contract('rn', 1) end)
            assert.has.errors(function() contract('rn', 'one') end)
        end)
    end)

    insulate('isOn()', function()
        local contract = require('contract')
        it('returns true when module is enabled', function()
            contract.on()
            assert.is.equal(true, contract.isOn())
        end)

        it('returns false when module is disabled', function()
            contract.off()
            assert.is.equal(false, contract.isOn())
        end)
    end)

    insulate('toggle()', function()
        local contract = require('contract')
        it('switches module from off to on', function()
            contract.off()
            contract.toggle()
            assert.is.equal(true, contract.isOn())
        end)

        it('switches module from on to off', function()
            contract.on()
            contract.toggle()
            assert.is.equal(false, contract.isOn())
        end)
    end)

    insulate('clearCache()', function()
        local contract = require('contract')
        it('runs without error', function()
            assert.has_no.errors(function() contract.clearCache() end)
        end)
    end)
end)