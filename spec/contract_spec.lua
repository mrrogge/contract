local contract = require('contract')

describe('contract module,', function()

--loop through the following data lists for all type-checking permutations:
local contractData = {
    {str='n', type_='number'},
    {str='num', type_='number'},
    {str='number', type_='number'},
    {str='s', type_='string'},
    {str='str', type_='string'},
    {str='string', type_='string'},
    {str='b', type_='boolean'},
    {str='bool', type_='boolean'},
    {str='boolean', type_='boolean'},
    {str='t', type_='table'},
    {str='tbl', type_='table'},
    {str='table', type_='table'},
    {str='f', type_='function'},
    {str='fnc', type_='function'},
    {str='func', type_='function'},
    {str='function', type_='function'},
    {str='th', type_='thread'},
    {str='thread', type_='thread'},
    {str='u', type_='userdata'},
    {str='usr', type_='userdata'},
    {str='user', type_='userdata'},
    {str='userdata', type_='userdata'}
}

local argData = {
    {val=1, type_='number'},
    {val='test', type_='string'},
    {val=true, type_='boolean'},
    {val=false, type_='boolean'},
    {val={}, type_='table'},
    {val=function() end, type_='function'},
    {val=coroutine.create(function() end), type_='thread'}
    --TODO: need to add a userdata val through the C interface.
}

--this test function can be reused for each test
local function x(contractStr, arg1, arg2)
    local function y(arg1, arg2)
        contract.check(contractStr)
    end
    y(arg1, arg2)
    contract.clearCallCache()
end

for i, rule in ipairs(contractData) do
    describe(('when passed "r%s", a required %s arg rule,'):format(
            rule.str, rule.type_), function()
        for j, arg in ipairs(argData) do
            describe(('and a %s arg,'):format(arg.type_), function()
                if rule.type_ == arg.type_ then
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x('r'..rule.str, arg.val)
                        end)
                    end)
                else
                    it('should fail', function()
                        assert.has.errors(function()
                            x('r'..rule.str, arg.val)
                        end)
                    end)
                end
            end)
        end
        describe('and no arg', function()
            it('should fail', function()
                assert.has.errors(function()
                    x('r'..rule.str)
                end)
            end)
        end)
    end)

    describe(('when passed "%s", an optional %s arg rule,'):format(
            rule.str, rule.type_), function()
        for j, arg in ipairs(argData) do
            describe(('and a %s arg,'):format(arg.type_), function()
                if rule.type_ == arg.type_ then
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x(rule.str, arg.val)
                        end)
                    end)
                else
                    it('should fail', function()
                        assert.has.errors(function()
                            x(rule.str, arg.val)
                        end)
                    end)
                end
            end)
        end
        describe('and no arg', function()
            it('should pass', function()
                assert.has_no.errors(function()
                    x(rule.str)
                end)
            end)
        end)
    end)
end

describe('when passed a nil contract', function()
    for i, arg in ipairs(argData) do
        describe(('and a %s arg'):format(arg.type_), function()
            it('should pass', function()
                assert.has_no.errors(function()
                    x(nil, arg.val)
                end)
            end)
        end)
    end
    describe('and no arg', function()
        it('should pass', function()
            assert.has_no.errors(function()
                x(nil)
            end)
        end)
    end)
end)

describe('when passed an empty string contract', function()
    for i, arg in ipairs(argData) do
        describe(('and a %s arg'):format(arg.type_), function()
            it('should pass', function()
                assert.has_no.errors(function()
                    x('', arg.val)
                end)
            end)
        end)
    end
    describe('and no arg', function()
        it('should pass', function()
            assert.has_no.errors(function()
                x(nil)
            end)
        end)
    end)
end)

describe('when passed a contract with differing capitalization', function()
    describe('and a matching arg', function()
        it('should pass', function()
            assert.has_no.errors(function()
                x('sTrInG', 'test')
            end)
        end)
    end)
    describe('and an invalid arg', function()
        it('should fail', function()
            assert.has.errors(function()
                x('sTrInG', 1)
            end)
        end)
    end)
end)

describe('when passed a contract with whitespace', function()
    describe('and a matching arg', function()
        it('should pass', function()
            assert.has_no.errors(function()
                x('\n\r\t n u m \n\r\t', 1)
            end)
        end)
    end)
    describe('and an invalid arg', function()
        it('should fail', function()
            assert.has.errors(function()
                x('\n\r\t n u m \n\r\t', 'test')
            end)
        end)
    end)
end)

describe('when passed a contract with a required multi-type arg rule', function()
    local str = 'rn|s'
    describe('and an arg that matches the first type', function()
        it('should pass', function()
            assert.has_no.errors(function()
                x(str, 1)
            end)
        end)
    end)
    describe('and an arg that matches the second type', function()
        it('should pass', function()
            assert.has_no.errors(function()
                x(str, 'test')
            end)
        end)
    end)
    describe('and an invalid arg', function()
        it('should fail', function()
            assert.has.errors(function()
                x(str, true)
            end)
        end)
    end)
    describe('and no arg', function()
        it('should fail', function()
            assert.has.errors(function()
                x(str)
            end)
        end)
    end)
end)

describe('when passed a contract with an optional multi-type arg rule', function()
    local str = 'n|s'
    describe('and an arg that matches the first type', function()
        it('should pass', function()
            assert.has_no.errors(function()
                x(str, 1)
            end)
        end)
    end)
    describe('and an arg that matches the second type', function()
        it('should pass', function()
            assert.has_no.errors(function()
                x(str, 'test')
            end)
        end)
    end)
    describe('and an invalid arg', function()
        it('should fail', function()
            assert.has.errors(function()
                x(str, true)
            end)
        end)
    end)
    describe('and no arg', function()
        it('should pass', function()
            assert.has_no.errors(function()
                x(str)
            end)
        end)
    end)
end)

describe('when passed a contract with two arg rules,', function()
    describe('first one required,', function()
        describe('second one required,', function()
            local str = 'rn,rs'
            describe('no first arg,', function()
                describe('and no second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str)
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, nil, 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, nil, 'two')
                        end)
                    end)
                end)
            end)
            describe('an invalid first arg,', function()
                describe('and no second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one')
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one', 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one', 'two')
                        end)
                    end)
                end)                
            end)
            describe('a matching first arg,', function()
                describe('and no second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 1)
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 1, 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x(str, 1, 'two')
                        end)
                    end)
                end) 
            end)
        end)
        describe('second one optional,', function()
            local str = 'rn,s'
            describe('no first arg,', function()
                describe('and no second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str)
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, nil, 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, nil, 'two')
                        end)
                    end)
                end)
            end)
            describe('an invalid first arg,', function()
                describe('and no second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one')
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one', 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one', 'two')
                        end)
                    end)
                end)                
            end)
            describe('a matching first arg,', function()
                describe('and no second arg', function()
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x(str, 1)
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 1, 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x(str, 1, 'two')
                        end)
                    end)
                end) 
            end)
        end)
    end)
    describe('first one optional,', function()
        describe('second one required,', function()
            local str = 'n,rs'
            describe('no first arg,', function()
                describe('and no second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str)
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, nil, 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x(str, nil, 'two')
                        end)
                    end)
                end)
            end)
            describe('an invalid first arg,', function()
                describe('and no second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one')
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one', 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one', 'two')
                        end)
                    end)
                end)                
            end)
            describe('a matching first arg,', function()
                describe('and no second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 1)
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 1, 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x(str, 1, 'two')
                        end)
                    end)
                end) 
            end)
        end)
        describe('second one optional,', function()
            local str = 'n,s'
            describe('no first arg,', function()
                describe('and no second arg', function()
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x(str)
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, nil, 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x(str, nil, 'two')
                        end)
                    end)
                end)
            end)
            describe('an invalid first arg,', function()
                describe('and no second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one')
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one', 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 'one', 'two')
                        end)
                    end)
                end)                
            end)
            describe('a matching first arg,', function()
                describe('and no second arg', function()
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x(str, 1)
                        end)
                    end)
                end)
                describe('and an invalid second arg', function()
                    it('should fail', function()
                        assert.has.errors(function()
                            x(str, 1, 2)
                        end)
                    end)
                end)
                describe('and a matching second arg', function()
                    it('should pass', function()
                        assert.has_no.errors(function()
                            x(str, 1, 'two')
                        end)
                    end)
                end) 
            end)
        end)
    end)
end)

describe('when used on a function with varargs,', function()
    describe('where args match the contract,', function()
        it('should pass', function()
            local function x(...)
                contract('rn,rs,rb,rt')
                contract.clearCallCache()
            end
            assert.has_no.errors(function() x(1,'two',true,{}) end)
        end)
    end)
    describe('where args violate the contract,', function()
        it('should fail', function()
            local function x(...)
                contract('rn,rs,rb,rt')
                contract.clearCallCache()
            end
            assert.has.errors(function() x('one',2,'not a bool', 'not a table') end)
        end)
    end)
end)

describe('on() function', function()
    it('enables contract checking', function()
        contract.on()
        assert.has_no.errors(function() x('rn,rs', 1,'two') end)
        assert.has.errors(function() x('rn,rs') end)
    end)
end)

describe('off() function', function()
    teardown(function() contract.on() end)
    it('disables contract checking', function()
        contract.off()
        assert.has_no.errors(function() x('rn,rs', 1,'two') end)
        assert.has_no.errors(function() x('rn,rs') end)
    end)
end)

describe('isOn()', function()
    teardown(function() contract.on() end)
    it('should return true when contract module is enabled', function()
        contract.on()
        assert.is.truthy(contract.isOn())
    end)

    it('should return false when contract module is disabled', function()
        contract.off()
        assert.is_not.truthy(contract.isOn())
    end)
end)

describe('toggle()', function()
    teardown(function() contract.on() end)
    it('toggle() should switch from off to on', function()
        contract.off()
        contract.toggle()
        assert.is.truthy(contract.isOn())
    end)

    it('toggle() should switch from on to off', function()
        contract.on()
        contract.toggle()
        assert.is_not.truthy(contract.isOn())
    end)
end)

describe('when passed a contract with a required "any" arg rule,', function()
    for j, arg in ipairs(argData) do
        describe(('and a %s arg,'):format(arg.type_), function()
            it('should pass', function()
                assert.has_no.errors(function() x('ra', arg.val) end)
            end)
        end)
    end
    describe('and no arg,', function()
        it('should fail', function()
            assert.has.errors(function() x('ra') end)
        end)
    end)
end)

describe('when passed a contract with an optional "any" arg rule,', function()
    for j, arg in ipairs(argData) do
        describe(('and a %s arg,'):format(arg.type_), function()
            it('should pass', function()
                assert.has_no.errors(function() x('a', arg.val) end)
            end)
        end)
    end
    describe('and no arg,', function()
        it('should pass', function()
            assert.has_no.errors(function() x('a') end)
        end)
    end)
end)

describe('when allowFalseOptionalArgs option is true,', function()
    contract.config({allowFalseOptionalArgs=true})
    describe('and when passed a contract with a required non-boolean rule,', function()
        describe('and passed no arg', function()
            it('should fail', function()
                assert.has.errors(function() x('rn') end)
            end)
        end)
        describe('and passed a false arg', function()
            it('should fail', function()
                assert.has.errors(function() x('rn', false) end)
            end)
        end)
        describe('and passed a matching arg', function()
            it('should pass', function()
                assert.has_no.errors(function() x('rn', 1) end)
            end)
        end)
        describe('and passed an invalid arg', function()
            it('should fail', function()
                assert.has.errors(function() x('rn', 'one') end)
            end)
        end)
    end)
    describe('and when passed a contract with a required boolean rule,', function()
        describe('and passed no arg', function()
            it('should fail', function()
                assert.has.errors(function() x('rb') end)
            end)
        end)
        describe('and passed a false arg', function()
            it('should pass', function()
                assert.has_no.errors(function() x('rb', false) end)
            end)
        end)
        describe('and passed a true arg', function()
            it('should pass', function()
                assert.has_no.errors(function() x('rb', true) end)
            end)
        end)
        describe('and passed an invalid arg', function()
            it('should fail', function()
                assert.has.errors(function() x('rb', 1) end)
            end)
        end)
    end)
    describe('and when passed a contract with an optional non-boolean rule,', function()
        describe('and passed no arg', function()
            it('should pass', function()
                assert.has_no.errors(function() x('n') end)
            end)
        end)
        describe('and passed a false arg', function()
            it('should pass', function()
                assert.has_no.errors(function() x('n', false) end)
            end)
        end)
        describe('and passed a matching arg', function()
            it('should pass', function()
                assert.has_no.errors(function() x('n', 1) end)
            end)
        end)
        describe('and passed an invalid arg', function()
            it('should fail', function()
                assert.has.errors(function() x('n', 'one') end)
            end)
        end)
    end)
    describe('and when passed a contract with an optional boolean rule,', function()
        describe('and passed no arg', function()
            it('should pass', function()
                assert.has_no.errors(function() x('b') end)
            end)
        end)
        describe('and passed a false arg', function()
            it('should pass', function()
                assert.has_no.errors(function() x('b', false) end)
            end)
        end)
        describe('and passed a true arg', function()
            it('should pass', function()
                assert.has_no.errors(function() x('b', true) end)
            end)
        end)
        describe('and passed an invalid arg', function()
            it('should fail', function()
                assert.has.errors(function() x('b', 1) end)
            end)
        end)
    end)
end)

it('should detect contract violations after successive calls to same function', function()
    assert.has_no.errors(function() x('rn',1) end)
    assert.has.errors(function() x('rn',true) end)
end)

end)